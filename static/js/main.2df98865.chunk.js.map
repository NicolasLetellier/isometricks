{"version":3,"sources":["isometricks_logo.svg","editor/gridUtils.js","editor/toolbar/Toolbar.js","editor/frame/TrianglesGrid.js","editor/frame/Frame.js","editor/Editor.js","editor/eventsUtils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TRIANGLE_EDGE_LENGTH","giveTriangleHeight","triangleEdgeLength","Math","sqrt","giveTriangleCoordinates","x","y","orientation","x1","x2","y1","y2","y3","topVertexCoord","sideVertexCoord","bottomVertexCoord","triangleBuilder","giveTriangleOrientation","coordinates","Toolbar","activeFace","setActiveFace","backwardInHistory","forwardInHistory","className","type","onClick","viewBox","points","disabled","d","transform","TrianglesGrid","presentation","gridDimensionsInTriangles","trianglesMap","triangleClickHandler","trianglesPolygons","triangleMapData","triangleGridCoord","topCoord","sideCoord","bottomCoord","push","key","data-orientation","stroke","strokeWidth","fill","height","width","Frame","gridWidthInTriangles","gridHeightInTriangles","polygonStack","gridDimensions","drawingPolygons","forEach","polygon","index","reduce","acc","value","preserveAspectRatio","FIXED_GRID_DIMENSIONS","Editor","useState","stacksHistory","setStacksHistory","historyNavIndex","setHistoryNavIndex","historyLastIndex","length","currentHistoryIndex","map","trianglesMapBuilder","addPolygonIntoStacksHistory","actualisedPolygonStack","previousStack","previousStackCopy","polygonCoordsString","flat","toString","i","splice","concat","actualiseStack","slicedHistory","slice","triangleMapCoord","eventTriangleCoord","upperTriangle","undefined","upperTriangleCoord","lowerTriangle","lowerTriangleCoord","onRightRow","onRightTriangleCoord","onLeftRow","onLeftTriangleCoord","calculateFacePoints","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2df98865.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/isometricks_logo.97a25612.svg\";","\n// WARNING: It is assumed that we will only use the hexagon\n// orientation that is really usefull for isometric drawings:\n// hexagons 'pointy topped'\n// a LOT of calculations are extrapolated based on this assumption\n\n// Here we define this value (1) as a universal basis of the project.\n// This will help to visualize other values like svg grid dimensions\nconst TRIANGLE_EDGE_LENGTH = 1;\n\nfunction giveTriangleHeight(triangleEdgeLength) {\n  return Math.sqrt(3) / 2 * triangleEdgeLength;\n}\n\n// Give orientation of triangle, pointing to left or right\nfunction giveTriangleOrientation(x, y) {\n  // This rule works because we decided to start grid\n  // at 0,0 with a left triangle.\n  // Using % as we won't have negative coordinates.\n  return (x % 2 === y % 2) ? 'left' : 'right';\n}\n\n// Coordinate system:\n// starts at 0, 0 (top left)\n// x (horizontal) increase to the right\n// y (vertical) increase to the bottom\n\n// Coordinates are given ordered, for any given triangle,\n// by increasing y:\n// first, top vertex coordinates\n// second, coordinates of the sided vertex (pointing to left or right)\n// third, bottom vertex coordinates\nfunction giveTriangleCoordinates(x, y, orientation) {\n  // for each triangle, we need to calculate:\n  // two values of x: x1 and x2\n  // and three values of y: y1, y2 and y3\n\n  const x1 = giveTriangleHeight(x * TRIANGLE_EDGE_LENGTH);\n  const x2 = giveTriangleHeight((x + 1) * TRIANGLE_EDGE_LENGTH);\n  const y1 = y * (TRIANGLE_EDGE_LENGTH / 2);\n  const y2 = (y * (TRIANGLE_EDGE_LENGTH / 2)) + (TRIANGLE_EDGE_LENGTH / 2);\n  const y3 = (y * (TRIANGLE_EDGE_LENGTH / 2)) + TRIANGLE_EDGE_LENGTH;\n\n  if (orientation === 'left') {\n    return {\n      topVertexCoord: [x2, y1],\n      sideVertexCoord: [x1, y2],\n      bottomVertexCoord: [x2, y3]\n    };\n  }\n  if (orientation === 'right') {\n    return {\n      topVertexCoord: [x1, y1],\n      sideVertexCoord: [x2, y2],\n      bottomVertexCoord: [x1, y3]\n    };\n  }\n}\n\nfunction triangleBuilder(x, y) {\n  const orientation = giveTriangleOrientation(x, y);\n  let triangle = {\n    orientation,\n    coordinates: giveTriangleCoordinates(x, y, orientation)\n  };\n  return triangle;\n}\n\nfunction trianglesMapBuilder(gridWidthInTriangles, gridHeightInTriangles) {\n  const map = [];\n\n  for (let x = 0; x < gridWidthInTriangles; x++) {\n    map[x] = [];\n    for (let y = 0; y < gridHeightInTriangles; y++) {\n      map[x][y] = triangleBuilder(x, y);\n    }\n  }\n  return map;\n}\n\nfunction calculateGridDimensions(gridWidthInTriangles, gridHeightInTriangles) {\n  const width = gridWidthInTriangles * giveTriangleHeight(TRIANGLE_EDGE_LENGTH);\n  const height = ((gridHeightInTriangles - 1) * TRIANGLE_EDGE_LENGTH / 2) + TRIANGLE_EDGE_LENGTH;\n  return {\n    width,\n    height\n  };\n}\n\nexport { trianglesMapBuilder, calculateGridDimensions };\n","\nimport React from 'react';\nimport './Toolbar.css';\n\nfunction Toolbar({ activeFace, setActiveFace, backwardInHistory, forwardInHistory }) {\n  return (\n    <div className=\"Toolbar\">\n      {/* <div className=\"left-buttons\">\n      </div> */}\n      <div className=\"center-buttons\">\n        <button\n          type=\"button\"\n          className={`left ${activeFace === 'left' && 'active'}`}\n          onClick={() => setActiveFace('left')}\n        >\n          <svg\n            viewBox=\"0 0 0.8660 1.5\"\n          >\n            <polygon\n              points=\"0,0 0.8660,0.5 0.8660,1.5 0,1\"\n            >\n            </polygon>\n          </svg>\n        </button>\n        <button\n          type=\"button\"\n          className={`top ${activeFace === 'top' && 'active'}`}\n          onClick={() => setActiveFace('top')}\n        >\n          <svg\n            viewBox=\"0 0 1.7321 1\"\n          >\n            <polygon\n              points=\"0.8660,0 1.7321,0.5 0.8660,1 0,0.5\"\n            >\n            </polygon>\n          </svg>\n        </button>\n        <button\n          type=\"button\"\n          className={`right ${activeFace === 'right' && 'active'}`}\n          onClick={() => setActiveFace('right')}\n        >\n          <svg\n            viewBox=\"0 0 0.8660 1.5\"\n          >\n            <polygon\n              points=\"0.8660,0 0.8660,1 0,1.5 0,0.5\"\n            >\n            </polygon>\n          </svg>\n        </button>\n      </div>\n      <div className=\"right-buttons\">\n        <button\n          type=\"button\"\n          className=\"backward\"\n          disabled={backwardInHistory === null}\n          onClick={backwardInHistory}\n        >\n          <svg\n            viewBox=\"0 0 454.839 454.839\"\n          >\n            <path\n              d=\"M404.908,283.853c0,94.282-76.71,170.986-170.986,170.986h-60.526c-10.03,0-18.158-8.127-18.158-18.157v-6.053c0-10.031,8.127-18.158,18.158-18.158h60.526c70.917,0,128.618-57.701,128.618-128.618c0-70.917-57.701-128.618-128.618-128.618H122.255l76.905,76.905c8.26,8.257,8.26,21.699,0,29.956c-8.015,8.009-21.964,7.997-29.961,0L56.137,149.031c-4.001-4.001-6.206-9.321-6.206-14.981c0-5.656,2.205-10.979,6.206-14.978L169.205,6.002c7.997-8.003,21.958-8.003,29.956,0c8.26,8.255,8.26,21.699,0,29.953l-76.905,76.911h111.666C328.198,112.866,404.908,189.573,404.908,283.853z\"\n            />\n          </svg>\n        </button>\n        <button\n          type=\"button\"\n          className=\"forward\"\n          disabled={forwardInHistory === null}\n          onClick={forwardInHistory}\n        >\n          <svg\n            viewBox=\"0 0 454.839 454.839\"\n          >\n            <g\n              transform=\"rotate(-180 227.41949462890625,227.45840454101562)\"\n            >\n              <path\n                d=\"m404.908004,170.994574c0,-94.332459 -76.709999,-171.07751 -170.985997,-171.07751l-60.525999,0c-10.03,0 -18.158,8.13135 -18.158,18.166717l0,6.05624c0,10.036369 8.127,18.167718 18.158,18.167718l60.525999,0c70.916999,0 128.617998,57.731881 128.617998,128.686835c0,70.954954 -57.700999,128.686835 -128.617998,128.686835l-111.666998,0l76.904999,-76.946159c8.26,-8.261419 8.26,-21.710613 0,-29.972032c-8.015,-8.013286 -21.964,-8.00128 -29.960999,0l-113.061998,113.125512c-4.001,4.003141 -6.206,9.325989 -6.206,14.989018c0,5.659027 2.205,10.984876 6.206,14.986016l113.067998,113.130514c7.997,8.007283 21.958,8.007283 29.955999,0c8.26,-8.259418 8.26,-21.710613 0,-29.969031l-76.904999,-76.952162l111.665998,0c94.275998,0 170.985997,-76.748053 170.985997,-171.078511z\"\n              />\n            </g>\n          </svg>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Toolbar;\n","\nimport React from 'react';\nimport './TrianglesGrid.css';\n\nfunction TrianglesGrid({\n  presentation,\n  gridDimensionsInTriangles,\n  trianglesMap,\n  triangleClickHandler\n}) {\n\n  const trianglesPolygons = [];\n  for (let x = 0; x < gridDimensionsInTriangles.width; x++) {\n    for (let y = 0; y < gridDimensionsInTriangles.height; y++) {\n      const triangleMapData = trianglesMap[x][y];\n\n      const orientation = triangleMapData.orientation;\n      const triangleGridCoord = triangleMapData.coordinates;\n      const topCoord = triangleGridCoord.topVertexCoord;\n      const sideCoord = triangleGridCoord.sideVertexCoord;\n      const bottomCoord = triangleGridCoord.bottomVertexCoord;\n\n      trianglesPolygons.push((\n        <polygon\n          key={`${x},${y}`}\n          points={`${topCoord[0]},${topCoord[1]} ${sideCoord[0]},${sideCoord[1]} ${bottomCoord[0]},${bottomCoord[1]}`}\n          data-orientation={orientation}\n          stroke={presentation.stroke}\n          strokeWidth={presentation.strokeWidth}\n          fill={presentation.fill}\n          onClick={triangleClickHandler && (\n            () => triangleClickHandler(\n              {x, y},\n              triangleMapData\n            )\n          )}\n        />\n      ));\n    }\n  }\n\n  // check g element syntax\n  return (\n    <g className=\"TrianglesGrid\">\n      {trianglesPolygons}\n    </g>\n  );\n}\n\nexport default TrianglesGrid;\n","\nimport React from 'react';\nimport TrianglesGrid from './TrianglesGrid';\nimport { calculateGridDimensions } from './../gridUtils';\nimport './Frame.css';\n\n\nfunction Frame({\n  gridDimensionsInTriangles,\n  trianglesMap,\n  triangleClickHandler,\n  polygonStack\n}) {\n  const gridDimensions = calculateGridDimensions(gridDimensionsInTriangles.width, gridDimensionsInTriangles.height);\n\n  // WARNING! we must find a way to not re-render Grid when activeFace,\n  // colors or drawing history change...\n\n  // GOAL is to change the visible grid from triangles grid to points grid,\n  // but conserve these two layers for related events\n\n  const triangleBackgroundPresentation = {\n    stroke: 'silver',\n    strokeWidth: '0.01',\n    fill: 'transparent'\n  };\n\n  const triangleEventsPresentation = {\n    stroke: 'none',\n    fill: 'transparent'\n  };\n\n  const drawingPolygons = [];\n\n  polygonStack.forEach((polygon, index) => {\n    const points = polygon.points.reduce((acc, value) => {\n      return (acc + `${value[0]},${value[1]} `);\n    }, '');\n    drawingPolygons.push((\n      <polygon\n        key={index}\n        points={points}\n        stroke=\"none\"\n        fill={polygon.fill}\n      />\n    ));\n  });\n\n  return (\n    <div className=\"Frame\">\n      <svg\n        className=\"Frame-svg\"\n        viewBox={`0 0 ${gridDimensions.width} ${gridDimensions.height}`}\n        preserveAspectRatio=\"xMidYMin\"\n      >\n        <rect\n          x=\"0\"\n          y=\"0\"\n          width={gridDimensions.width}\n          height={gridDimensions.height}\n          className=\"Frame-background\"\n          stroke=\"none\"\n          fill={'white'}\n        />\n        <TrianglesGrid\n          presentation={triangleBackgroundPresentation}\n          gridDimensionsInTriangles={gridDimensionsInTriangles}\n          trianglesMap={trianglesMap}\n        />\n        {drawingPolygons}\n        <TrianglesGrid\n          presentation={triangleEventsPresentation}\n          gridDimensionsInTriangles={gridDimensionsInTriangles}\n          trianglesMap={trianglesMap}\n          triangleClickHandler={triangleClickHandler}\n        />\n      </svg>\n    </div>\n  );\n}\n\nexport default Frame;\n","\nimport React, { useState } from 'react';\n\nimport { trianglesMapBuilder } from './gridUtils';\nimport { calculateFacePoints } from './eventsUtils';\n\nimport Toolbar from './toolbar/Toolbar';\nimport Frame from './frame/Frame';\nimport './Editor.css';\n\n// to start before having grid size selector,\n// indicated in triangles\nconst FIXED_GRID_DIMENSIONS = {\n  width: 19,\n  height: 39\n};\n\nfunction Editor() {\n  // const [gridDimensionsInTriangles, setGridDimensionsInTriangles] = useState(FIXED_GRID_DIMENSIONS);\n  const [activeFace, setActiveFace] = useState('left');\n  // history array of polygon stacks\n  // polygon stack: array of polygon objects to be draw\n  const [stacksHistory, setStacksHistory] = useState([[]]);\n  // historyNavIndex === null : not currently in history navigation\n  const [historyNavIndex, setHistoryNavIndex] = useState(null);\n\n  // length shouldn't be less than 1\n  const historyLastIndex = stacksHistory.length - 1;\n\n  function currentHistoryIndex() {\n    return (historyNavIndex === null) ? historyLastIndex : historyNavIndex;\n  }\n\n  const trianglesMap = trianglesMapBuilder(FIXED_GRID_DIMENSIONS.width, FIXED_GRID_DIMENSIONS.height);\n\n  function backwardInHistory() {\n    if (historyNavIndex === null) {\n      setHistoryNavIndex(historyLastIndex - 1);\n    } else {\n      setHistoryNavIndex(historyNavIndex - 1);\n    }\n  }\n\n  function backwardInHistoryProp() {\n    if (historyLastIndex === 0 || historyNavIndex === 0) {\n      return null;\n    } else {\n      return backwardInHistory;\n    }\n  }\n\n  function forwardInHistory() {\n    if (historyNavIndex === historyLastIndex - 1) {\n      setHistoryNavIndex(null);\n    } else {\n      setHistoryNavIndex(historyNavIndex + 1);\n    }\n  }\n\n  function forwardInHistoryProp() {\n    if (historyNavIndex === null) {\n      return null;\n    } else {\n      return forwardInHistory;\n    }\n  }\n\n  // check if this face is exactly the same as an older one,\n  // and remove it because it would be exactly covered by the new one.\n  // (maybe disable this if in case of use of transparent colors for upper one??)\n  // BE CAREFULL, it won't work in comparing 'shape' coords!\n  // if exactly repeated polygons (same colors, etc...) it will give the impression\n  // when using history nav that nothing was done on this action... but necesary if\n  // some parts of other faces are between the two equals polygons (stack order\n  // has to be corrected)\n  function actualiseStack(previousStack, polygon) {\n    let previousStackCopy = [...previousStack];\n    const polygonCoordsString = polygon.points.flat().toString();\n    for (let i = 0; i < previousStackCopy.length; i++) {\n      const previousPolygonCoordsString = previousStackCopy[i].points.flat().toString();\n      if (previousPolygonCoordsString === polygonCoordsString) {\n        previousStackCopy.splice(i, 1);\n        break; // no possible other repeated faces as it's always checked\n      }\n    }\n    return previousStackCopy.concat(polygon);\n  }\n\n  // truncate forward history to add new stack if currently in history navigation\n  function addPolygonIntoStacksHistory(polygon) {\n    const previousPolygonStack = stacksHistory[currentHistoryIndex()];\n    const actualisedPolygonStack = actualiseStack(previousPolygonStack, polygon);\n    const slicedHistory = stacksHistory.slice(0, currentHistoryIndex() + 1);\n    slicedHistory.push(actualisedPolygonStack);\n    setStacksHistory(slicedHistory);\n    setHistoryNavIndex(null);\n  }\n\n  function triangleClickHandler(triangleMapCoord, triangleMapData) {\n    if (activeFace === null) { // activeFace set to null: inactivate any click event\n      return;\n    }\n\n    const points = calculateFacePoints(\n      triangleMapCoord,\n      triangleMapData,\n      trianglesMap,\n      activeFace\n    );\n\n    if (points === undefined) { // invalid event on grid edge\n      return;\n    }\n\n    let fill; // any css color syntax accepted\n    if (activeFace === 'top') {\n      fill = 'lightskyblue';\n    } else if (activeFace === 'right') {\n      fill = 'mediumblue';\n    } else if (activeFace === 'left') {\n      fill = 'royalblue';\n    }\n\n    const polygon = {\n      type: 'face', // other will be 'shape' when implemented\n      points,\n      fill\n      // stroke and stroke-width: configurables too!\n      // orientation: needed? > probably for changing all\n      // similar faces color at once and for detecting exactly repeated faces\n    };\n\n    addPolygonIntoStacksHistory(polygon);\n  }\n\n  return (\n    <div className=\"Editor\">\n      <Toolbar\n        activeFace={activeFace}\n        setActiveFace={setActiveFace}\n        backwardInHistory={backwardInHistoryProp()}\n        forwardInHistory={forwardInHistoryProp()}\n      />\n      <Frame\n        gridDimensionsInTriangles={FIXED_GRID_DIMENSIONS}\n        trianglesMap={trianglesMap}\n        triangleClickHandler={triangleClickHandler}\n        polygonStack={stacksHistory[currentHistoryIndex()]}\n      />\n    </div>\n  );\n}\n\nexport default Editor;\n","\n// return points in an array of coordinates, not svg syntax,\n// as: [[x1,y1], [x2,y2], [x3,y3], [x4,y4]]\n// (to have the same format for future 'shape' points, that COULD need\n// it for history navigation...) > BUT performance considerations (i.e. looping on it twice)?\n// return undefined if complementary triangle for this face is out of grid.\n\n// for every activeFace, points coords are ordened in only one way,\n// to enable 'repeated faces' comparisons\n// BE CAREFULL, this rule won't apply to 'shape' polygons!!\nfunction calculateFacePoints(\n  triangleMapCoord,\n  triangleMapData,\n  trianglesMap,\n  activeFace\n) {\n  const orientation = triangleMapData.orientation;\n  const eventTriangleCoord = triangleMapData.coordinates;\n\n  const points = [];\n  if (activeFace === 'left' || activeFace === 'right') {\n    if (orientation === activeFace) {\n      const upperTriangle = trianglesMap[triangleMapCoord.x][triangleMapCoord.y - 1];\n      if (upperTriangle === undefined) { // complementary triangle for this face is out of grid\n        return;\n      }\n      const upperTriangleCoord = upperTriangle.coordinates;\n      points.push(upperTriangleCoord.topVertexCoord);\n      points.push(eventTriangleCoord.topVertexCoord);\n      points.push(eventTriangleCoord.bottomVertexCoord);\n      points.push(eventTriangleCoord.sideVertexCoord);\n    } else {\n      const lowerTriangle = trianglesMap[triangleMapCoord.x][triangleMapCoord.y + 1];\n      if (lowerTriangle === undefined) { // complementary triangle for this face is out of grid\n        return;\n      }\n      const lowerTriangleCoord = lowerTriangle.coordinates;\n      points.push(eventTriangleCoord.topVertexCoord);\n      points.push(eventTriangleCoord.sideVertexCoord);\n      points.push(lowerTriangleCoord.bottomVertexCoord);\n      points.push(eventTriangleCoord.bottomVertexCoord);\n    }\n  } else if (activeFace === 'top') {\n    if (orientation === 'left') {\n      const onRightRow = trianglesMap[triangleMapCoord.x + 1];\n      if (onRightRow === undefined) { // complementary triangle for this face is out of grid\n        return;\n      }\n      const onRightTriangleCoord = onRightRow[triangleMapCoord.y].coordinates;\n      points.push(eventTriangleCoord.topVertexCoord);\n      points.push(onRightTriangleCoord.sideVertexCoord);\n      points.push(eventTriangleCoord.bottomVertexCoord);\n      points.push(eventTriangleCoord.sideVertexCoord);\n    } else if (orientation === 'right') {\n      const onLeftRow = trianglesMap[triangleMapCoord.x - 1];\n      if (onLeftRow === undefined) { // complementary triangle for this face is out of grid\n        return;\n      }\n      const onLeftTriangleCoord = onLeftRow[triangleMapCoord.y].coordinates;\n      points.push(eventTriangleCoord.topVertexCoord);\n      points.push(eventTriangleCoord.sideVertexCoord);\n      points.push(eventTriangleCoord.bottomVertexCoord);\n      points.push(onLeftTriangleCoord.sideVertexCoord);\n    }\n  }\n  return points;\n}\n\nexport { calculateFacePoints };\n","\nimport React from 'react';\nimport Editor from './editor/Editor';\nimport logo from './isometricks_logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <Editor />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}